;; Analyzed by ClojureScript 0.0-3308
{:name cats.protocols, :doc "Abstractions of Category Theory over that\n  cats library is build.\n\n  Functions of this namespace are not indented\n  to be used directly. Is a private api but exposes\n  as public for documentation purposes.", :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires nil, :imports nil, :defs {Monad {:meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 64, :column 14, :end-line 64, :end-column 19, :doc "The Monad abstraction.", :protocol-symbol true, :protocol-info {:methods {mreturn [[m v]], mbind [[m mv f]]}}}, :protocol-symbol true, :name cats.protocols/Monad, :file "out/cats/protocols.cljs", :end-column 19, :column 1, :line 64, :protocol-info {:methods {mreturn [[m v]], mbind [[m mv f]]}}, :info nil, :end-line 64, :impls #{}, :doc "The Monad abstraction."}, pass {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 100, :column 4, :end-line 100, :end-column 8, :protocol cats.protocols/MonadWriter, :doc "Given a writer whose value is a pair with a function as its second element,\n     yield a writer which has the first element of the pair as the value and\n     the result of applying the aforementioned function to the log as the new log.", :arglists (quote ([m mv]))}, :protocol cats.protocols/MonadWriter, :name cats.protocols/pass, :variadic false, :file "out/cats/protocols.cljs", :end-column 8, :method-params ([m mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m mv])), :doc "Given a writer whose value is a pair with a function as its second element,\n     yield a writer which has the first element of the pair as the value and\n     the result of applying the aforementioned function to the log as the new log."}, pure {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 60, :column 4, :end-line 60, :end-column 8, :protocol cats.protocols/Applicative, :doc "Takes any context monadic value ctx and any value v, and puts\n     the value v in the most minimal context of same type of ctx", :arglists (quote ([app v]))}, :protocol cats.protocols/Applicative, :name cats.protocols/pure, :variadic false, :file "out/cats/protocols.cljs", :end-column 8, :method-params ([app v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app v])), :doc "Takes any context monadic value ctx and any value v, and puts\n     the value v in the most minimal context of same type of ctx"}, base {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 107, :column 4, :end-line 107, :end-column 8, :protocol cats.protocols/MonadTrans, :doc "Return the base monad of this transformer.", :arglists (quote ([mt]))}, :protocol cats.protocols/MonadTrans, :name cats.protocols/base, :variadic false, :file "out/cats/protocols.cljs", :end-column 8, :method-params ([mt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mt])), :doc "Return the base monad of this transformer."}, Functor {:meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 51, :column 14, :end-line 51, :end-column 21, :doc "The Functor abstraction.", :protocol-symbol true, :protocol-info {:methods {fmap [[ftor f fv]]}}}, :protocol-symbol true, :name cats.protocols/Functor, :file "out/cats/protocols.cljs", :end-column 21, :column 1, :line 51, :protocol-info {:methods {fmap [[ftor f fv]]}}, :info nil, :end-line 51, :impls #{}, :doc "The Functor abstraction."}, fapply {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 57, :column 4, :end-line 57, :end-column 10, :protocol cats.protocols/Applicative, :doc "Applies the function(s) inside ag's context to the value(s)\n     inside av's context while preserving the context.", :arglists (quote ([app af av]))}, :protocol cats.protocols/Applicative, :name cats.protocols/fapply, :variadic false, :file "out/cats/protocols.cljs", :end-column 10, :method-params ([app af av]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 57, :max-fixed-arity 3, :fn-var true, :arglists (quote ([app af av])), :doc "Applies the function(s) inside ag's context to the value(s)\n     inside av's context while preserving the context."}, Applicative {:meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 55, :column 14, :end-line 55, :end-column 25, :doc "The Applicative abstraction.", :protocol-symbol true, :protocol-info {:methods {fapply [[app af av]], pure [[app v]]}}}, :protocol-symbol true, :name cats.protocols/Applicative, :file "out/cats/protocols.cljs", :end-column 25, :column 1, :line 55, :protocol-info {:methods {fapply [[app af av]], pure [[app v]]}}, :info nil, :end-line 55, :impls #{}, :doc "The Applicative abstraction."}, local {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 90, :column 4, :end-line 90, :end-column 9, :protocol cats.protocols/MonadReader, :doc "Create a reader in a modified version of the environment.", :arglists (quote ([m f reader]))}, :protocol cats.protocols/MonadReader, :name cats.protocols/local, :variadic false, :file "out/cats/protocols.cljs", :end-column 9, :method-params ([m f reader]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 90, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m f reader])), :doc "Create a reader in a modified version of the environment."}, MonadWriter {:meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 92, :column 14, :end-line 92, :end-column 25, :doc "A specific case of Monad abstraction that\n  allows emulate write operations in pure functional\n  way.\n\n  A great example is writing a log message.", :protocol-symbol true, :protocol-info {:methods {listen [[m mv]], tell [[m v]], pass [[m mv]]}}}, :protocol-symbol true, :name cats.protocols/MonadWriter, :file "out/cats/protocols.cljs", :end-column 25, :column 1, :line 92, :protocol-info {:methods {listen [[m mv]], tell [[m v]], pass [[m mv]]}}, :info nil, :end-line 92, :impls #{}, :doc "A specific case of Monad abstraction that\n  allows emulate write operations in pure functional\n  way.\n\n  A great example is writing a log message."}, ask {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 89, :column 4, :end-line 89, :end-column 7, :protocol cats.protocols/MonadReader, :doc "Return the current environment.", :arglists (quote ([m]))}, :protocol cats.protocols/MonadReader, :name cats.protocols/ask, :variadic false, :file "out/cats/protocols.cljs", :end-column 7, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Return the current environment."}, lift {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 109, :column 4, :end-line 109, :end-column 8, :protocol cats.protocols/MonadTrans, :doc "Lift a value from the parameterized monad to the transformer.", :arglists (quote ([m mv]))}, :protocol cats.protocols/MonadTrans, :name cats.protocols/lift, :variadic false, :file "out/cats/protocols.cljs", :end-column 8, :method-params ([m mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 109, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m mv])), :doc "Lift a value from the parameterized monad to the transformer."}, MonadReader {:meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 86, :column 14, :end-line 86, :end-column 25, :doc "A specific case of Monad abstraction that\n  allows a read only access to an environment.", :protocol-symbol true, :protocol-info {:methods {ask [[m]], local [[m f reader]]}}}, :protocol-symbol true, :name cats.protocols/MonadReader, :file "out/cats/protocols.cljs", :end-column 25, :column 1, :line 86, :protocol-info {:methods {ask [[m]], local [[m f reader]]}}, :info nil, :end-line 86, :impls #{}, :doc "A specific case of Monad abstraction that\n  allows a read only access to an environment."}, MonadPlus {:meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 74, :column 14, :end-line 74, :end-column 23, :doc "A complement abstraction for Monad that\n  supports the notion of addition.", :protocol-symbol true, :protocol-info {:methods {mplus [[m mv mv']]}}}, :protocol-symbol true, :name cats.protocols/MonadPlus, :file "out/cats/protocols.cljs", :end-column 23, :column 1, :line 74, :protocol-info {:methods {mplus [[m mv mv']]}}, :info nil, :end-line 74, :impls #{}, :doc "A complement abstraction for Monad that\n  supports the notion of addition."}, mzero {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 72, :column 4, :end-line 72, :end-column 9, :protocol cats.protocols/MonadZero, :doc "The identity element for `ctx`.", :arglists (quote ([m]))}, :protocol cats.protocols/MonadZero, :name cats.protocols/mzero, :variadic false, :file "out/cats/protocols.cljs", :end-column 9, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "The identity element for `ctx`."}, put-state {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 83, :column 4, :end-line 83, :end-column 13, :protocol cats.protocols/MonadState, :doc "Update the state.", :arglists (quote ([m newstate]))}, :protocol cats.protocols/MonadState, :name cats.protocols/put-state, :variadic false, :file "out/cats/protocols.cljs", :end-column 13, :method-params ([m newstate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m newstate])), :doc "Update the state."}, tell {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 99, :column 4, :end-line 99, :end-column 8, :protocol cats.protocols/MonadWriter, :doc "Add the given value to the log.", :arglists (quote ([m v]))}, :protocol cats.protocols/MonadWriter, :name cats.protocols/tell, :variadic false, :file "out/cats/protocols.cljs", :end-column 8, :method-params ([m v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m v])), :doc "Add the given value to the log."}, get-state {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 82, :column 4, :end-line 82, :end-column 13, :protocol cats.protocols/MonadState, :doc "Return the current state.", :arglists (quote ([m]))}, :protocol cats.protocols/MonadState, :name cats.protocols/get-state, :variadic false, :file "out/cats/protocols.cljs", :end-column 13, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Return the current state."}, mplus {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 77, :column 4, :end-line 77, :end-column 9, :protocol cats.protocols/MonadPlus, :doc "An associative addition operation.", :arglists (quote ([m mv mv']))}, :protocol cats.protocols/MonadPlus, :name cats.protocols/mplus, :variadic false, :file "out/cats/protocols.cljs", :end-column 9, :method-params ([m mv mv']), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 77, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m mv mv'])), :doc "An associative addition operation."}, mreturn {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 66, :column 4, :end-line 66, :end-column 11, :protocol cats.protocols/Monad, :doc nil, :arglists (quote ([m v]))}, :protocol cats.protocols/Monad, :name cats.protocols/mreturn, :variadic false, :file "out/cats/protocols.cljs", :end-column 11, :method-params ([m v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m v])), :doc nil}, MonadZero {:meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 69, :column 14, :end-line 69, :end-column 23, :doc "A complement abstraction for monad that\n  supports the notion of an identity element.", :protocol-symbol true, :protocol-info {:methods {mzero [[m]]}}}, :protocol-symbol true, :name cats.protocols/MonadZero, :file "out/cats/protocols.cljs", :end-column 23, :column 1, :line 69, :protocol-info {:methods {mzero [[m]]}}, :info nil, :end-line 69, :impls #{}, :doc "A complement abstraction for monad that\n  supports the notion of an identity element."}, get-context {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 44, :column 4, :end-line 44, :end-column 15, :protocol cats.protocols/Context, :doc "Get the monad instance for curent value.", :arglists (quote ([_]))}, :protocol cats.protocols/Context, :name cats.protocols/get-context, :variadic false, :file "out/cats/protocols.cljs", :end-column 15, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Get the monad instance for curent value."}, Context {:meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 34, :column 14, :end-line 34, :end-column 21, :doc "Abstraction that establish a membership of types\n  with one concrete monad.\n\n  This is a way that cats establishes the relation\n  between a type and the monad that that should play.\n\n  A great example es Maybe monad type Just. It implements\n  this abstraction for establish that Just is part of\n  Maybe monad.", :protocol-symbol true, :protocol-info {:methods {get-context [[_]]}}}, :protocol-symbol true, :name cats.protocols/Context, :file "out/cats/protocols.cljs", :end-column 21, :column 1, :line 34, :protocol-info {:methods {get-context [[_]]}}, :info nil, :end-line 34, :impls #{}, :doc "Abstraction that establish a membership of types\n  with one concrete monad.\n\n  This is a way that cats establishes the relation\n  between a type and the monad that that should play.\n\n  A great example es Maybe monad type Just. It implements\n  this abstraction for establish that Just is part of\n  Maybe monad."}, Extract {:meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 46, :column 14, :end-line 46, :end-column 21, :doc "A type class responsible of extract the\n  value from a monad context.", :protocol-symbol true, :protocol-info {:methods {extract [[mv]]}}}, :protocol-symbol true, :name cats.protocols/Extract, :file "out/cats/protocols.cljs", :end-column 21, :column 1, :line 46, :protocol-info {:methods {extract [[mv]]}}, :info nil, :end-line 46, :impls #{}, :doc "A type class responsible of extract the\n  value from a monad context."}, inner {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 108, :column 4, :end-line 108, :end-column 9, :protocol cats.protocols/MonadTrans, :doc "Return the monad that this transformer wraps.", :arglists (quote ([mt]))}, :protocol cats.protocols/MonadTrans, :name cats.protocols/inner, :variadic false, :file "out/cats/protocols.cljs", :end-column 9, :method-params ([mt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mt])), :doc "Return the monad that this transformer wraps."}, listen {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 98, :column 4, :end-line 98, :end-column 10, :protocol cats.protocols/MonadWriter, :doc "Given a writer, yield a (value, log) pair as a value.", :arglists (quote ([m mv]))}, :protocol cats.protocols/MonadWriter, :name cats.protocols/listen, :variadic false, :file "out/cats/protocols.cljs", :end-column 10, :method-params ([m mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m mv])), :doc "Given a writer, yield a (value, log) pair as a value."}, MonadState {:meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 79, :column 14, :end-line 79, :end-column 24, :doc "A specific case of Monad abstraction for\n  work with state in pure functional way.", :protocol-symbol true, :protocol-info {:methods {get-state [[m]], put-state [[m newstate]], swap-state [[m f]]}}}, :protocol-symbol true, :name cats.protocols/MonadState, :file "out/cats/protocols.cljs", :end-column 24, :column 1, :line 79, :protocol-info {:methods {get-state [[m]], put-state [[m newstate]], swap-state [[m f]]}}, :info nil, :end-line 79, :impls #{}, :doc "A specific case of Monad abstraction for\n  work with state in pure functional way."}, mbind {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 67, :column 4, :end-line 67, :end-column 9, :protocol cats.protocols/Monad, :doc nil, :arglists (quote ([m mv f]))}, :protocol cats.protocols/Monad, :name cats.protocols/mbind, :variadic false, :file "out/cats/protocols.cljs", :end-column 9, :method-params ([m mv f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 67, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m mv f])), :doc nil}, MonadTrans {:meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 105, :column 14, :end-line 105, :end-column 24, :doc "A common abstraction for all monad transformers.", :protocol-symbol true, :protocol-info {:methods {base [[mt]], inner [[mt]], lift [[m mv]]}}}, :protocol-symbol true, :name cats.protocols/MonadTrans, :file "out/cats/protocols.cljs", :end-column 24, :column 1, :line 105, :protocol-info {:methods {base [[mt]], inner [[mt]], lift [[m mv]]}}, :info nil, :end-line 105, :impls #{}, :doc "A common abstraction for all monad transformers."}, fmap {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 53, :column 4, :end-line 53, :end-column 8, :protocol cats.protocols/Functor, :doc "Applies function f to the value(s) inside the context of the functor fv.", :arglists (quote ([ftor f fv]))}, :protocol cats.protocols/Functor, :name cats.protocols/fmap, :variadic false, :file "out/cats/protocols.cljs", :end-column 8, :method-params ([ftor f fv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 53, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ftor f fv])), :doc "Applies function f to the value(s) inside the context of the functor fv."}, extract {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 49, :column 4, :end-line 49, :end-column 11, :protocol cats.protocols/Extract, :doc "Extract the value from monad context.", :arglists (quote ([mv]))}, :protocol cats.protocols/Extract, :name cats.protocols/extract, :variadic false, :file "out/cats/protocols.cljs", :end-column 11, :method-params ([mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mv])), :doc "Extract the value from monad context."}, swap-state {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/cats/protocols.cljs", :line 84, :column 4, :end-line 84, :end-column 14, :protocol cats.protocols/MonadState, :doc "Apply a function to the current state and update it.", :arglists (quote ([m f]))}, :protocol cats.protocols/MonadState, :name cats.protocols/swap-state, :variadic false, :file "out/cats/protocols.cljs", :end-column 14, :method-params ([m f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 84, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m f])), :doc "Apply a function to the current state and update it."}}}