;; Analyzed by ClojureScript 0.0-3308
{:name playground.node-lib.errors, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires nil, :imports nil, :defs {is-error? {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/src/playground/node_lib/errors.cljs", :line 3, :column 8, :end-line 3, :end-column 17, :private true, :arglists (quote ([x]))}, :private true, :name playground.node-lib.errors/is-error?, :variadic false, :file "src/playground/node_lib/errors.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, throw-error {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/src/playground/node_lib/errors.cljs", :line 7, :column 7, :end-line 7, :end-column 18, :arglists (quote ([x])), :doc "Throws x if it is an error, otherwise does nothing"}, :name playground.node-lib.errors/throw-error, :variadic false, :file "src/playground/node_lib/errors.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Throws x if it is an error, otherwise does nothing"}, lift {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/src/playground/node_lib/errors.cljs", :line 14, :column 7, :end-line 14, :end-column 11, :arglists (quote ([f])), :doc "Lifts f to work with possibly error arguments.\n\n   If any argument is an error, returns it, otherwise acts like f"}, :name playground.node-lib.errors/lift, :variadic false, :file "src/playground/node_lib/errors.cljs", :end-column 11, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Lifts f to work with possibly error arguments.\n\n   If any argument is an error, returns it, otherwise acts like f"}}}