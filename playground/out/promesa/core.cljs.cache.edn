;; Analyzed by ClojureScript 0.0-3308
{:use-macros nil, :excludes #{delay spread some}, :name promesa.core, :imports nil, :requires {m cats.core, cats.core cats.core, proto cats.protocols, cats.protocols cats.protocols, org.bluebird org.bluebird}, :uses nil, :defs {timeout {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 153, :column 7, :end-line 153, :end-column 14, :arglists (quote ([p t] [p t v])), :doc "Returns a cancellable promise that will be fulfilled\n  with this promise's fulfillment value or rejection reason.\n  However, if this promise is not fulfilled or rejected\n  within `ms` milliseconds, the returned promise is cancelled\n  with a TimeoutError", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p t] [p t v]), :arglists ([p t] [p t v]), :arglists-meta (nil nil)}}, :name promesa.core/timeout, :variadic false, :file "out/promesa/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p t] [p t v]), :arglists ([p t] [p t v]), :arglists-meta (nil nil)}, :method-params ([p t] [p t v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 3, :fn-var true, :arglists ([p t] [p t v]), :doc "Returns a cancellable promise that will be fulfilled\n  with this promise's fulfillment value or rejection reason.\n  However, if this promise is not fulfilled or rejected\n  within `ms` milliseconds, the returned promise is cancelled\n  with a TimeoutError"}, delay {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 144, :column 7, :end-line 144, :end-column 12, :arglists (quote ([t] [t v])), :doc "Given a timeout in miliseconds and optional\n  value, returns a promise that will fulfilled\n  with provided value (or nil) after the\n  time is reached.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([t] [t v]), :arglists ([t] [t v]), :arglists-meta (nil nil)}}, :name promesa.core/delay, :variadic false, :file "out/promesa/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([t] [t v]), :arglists ([t] [t v]), :arglists-meta (nil nil)}, :method-params ([t] [t v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 2, :fn-var true, :arglists ([t] [t v]), :doc "Given a timeout in miliseconds and optional\n  value, returns a promise that will fulfilled\n  with provided value (or nil) after the\n  time is reached."}, any {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 130, :column 7, :end-line 130, :end-column 10, :arglists (quote ([promises])), :doc "Given an array of promises, return a promise\n  that is fulfilled when first one item in the\n  array is fulfilled."}, :name promesa.core/any, :variadic false, :file "out/promesa/core.cljs", :end-column 10, :method-params ([promises]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([promises])), :doc "Given an array of promises, return a promise\n  that is fulfilled when first one item in the\n  array is fulfilled."}, finally {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 173, :column 7, :end-line 173, :end-column 14, :arglists (quote ([p callback])), :doc "A chain helper that associate handler to\n  the promise that will be called regardless\n  if it is resolved or rejected."}, :name promesa.core/finally, :variadic false, :file "out/promesa/core.cljs", :end-column 14, :method-params ([p callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p callback])), :doc "A chain helper that associate handler to\n  the promise that will be called regardless\n  if it is resolved or rejected."}, ->t10674 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cats.protocols/Monad cats.protocols/Functor cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([meta10675])), :file nil}, :protocols #{cats.protocols/Monad cats.protocols/Functor cljs.core/IMeta cljs.core/IWithMeta}, :name promesa.core/->t10674, :variadic false, :file "out/promesa/core.cljs", :method-params ([meta10675]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([meta10675])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, fulfilled? {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 95, :column 7, :end-line 95, :end-column 17, :arglists (quote ([p])), :doc "Returns true if promise `p` is\n  already fulfilled."}, :name promesa.core/fulfilled?, :variadic false, :file "out/promesa/core.cljs", :end-column 17, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns true if promise `p` is\n  already fulfilled."}, promisify {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 208, :column 7, :end-line 208, :end-column 16, :arglists (quote ([callable])), :doc "Given a nodejs like function that accepts a callback\n  as the last argument and return an other function\n  that returns a promise."}, :name promesa.core/promisify, :variadic false, :file "out/promesa/core.cljs", :end-column 16, :method-params ([callable]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 1, :fn-var true, :arglists (quote ([callable])), :doc "Given a nodejs like function that accepts a callback\n  as the last argument and return an other function\n  that returns a promise."}, rejected {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 76, :column 7, :end-line 76, :end-column 15, :arglists (quote ([v])), :doc "Return a rejected promise with provided reason."}, :name promesa.core/rejected, :variadic false, :file "out/promesa/core.cljs", :end-column 15, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Return a rejected promise with provided reason."}, spread {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 167, :column 7, :end-line 167, :end-column 13, :arglists (quote ([p callback])), :doc "A chain helper like `then` but recevies a\n  resolved promises unrolled as parameters."}, :name promesa.core/spread, :variadic false, :file "out/promesa/core.cljs", :end-column 13, :method-params ([p callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p callback])), :doc "A chain helper like `then` but recevies a\n  resolved promises unrolled as parameters."}, promise {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 81, :column 7, :end-line 81, :end-column 14, :arglists (quote ([v])), :doc "The promise instance constructor."}, :name promesa.core/promise, :variadic false, :file "out/promesa/core.cljs", :end-column 14, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "The promise instance constructor."}, cancellable? {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 116, :column 7, :end-line 116, :end-column 19, :arglists (quote ([p])), :doc "Returns true if promise `p` is\n  cancelable."}, :name promesa.core/cancellable?, :variadic false, :file "out/promesa/core.cljs", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns true if promise `p` is\n  cancelable."}, value {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 196, :column 7, :end-line 196, :end-column 12, :arglists (quote ([p])), :doc "Get the fulfillment value of this promise.\n  Throws an error if the promise isn't fulfilled."}, :name promesa.core/value, :variadic false, :file "out/promesa/core.cljs", :end-column 12, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Get the fulfillment value of this promise.\n  Throws an error if the promise isn't fulfilled."}, promise-monad {:name promesa.core/promise-monad, :file "out/promesa/core.cljs", :line 38, :column 1, :end-line 39, :end-column 16, :no-doc true, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 39, :column 3, :end-line 39, :end-column 16, :no-doc true}}, some {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 137, :column 7, :end-line 137, :end-column 11, :arglists (quote ([n promises])), :doc "Given an array of promises, return a promise\n  that is fulfilled when `n` number of promises\n  is fulfilled."}, :name promesa.core/some, :variadic false, :file "out/promesa/core.cljs", :end-column 11, :method-params ([n promises]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n promises])), :doc "Given an array of promises, return a promise\n  that is fulfilled when `n` number of promises\n  is fulfilled."}, all {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 123, :column 7, :end-line 123, :end-column 10, :arglists (quote ([promises])), :doc "Given an array of promises, return a promise\n  that is fulfilled  when all the items in the\n  array are fulfilled."}, :name promesa.core/all, :variadic false, :file "out/promesa/core.cljs", :end-column 10, :method-params ([promises]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([promises])), :doc "Given an array of promises, return a promise\n  that is fulfilled  when all the items in the\n  array are fulfilled."}, promise? {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 89, :column 7, :end-line 89, :end-column 15, :arglists (quote ([p])), :doc "Returns true if `p` is a primise\n  instance."}, :name promesa.core/promise?, :variadic false, :file "out/promesa/core.cljs", :end-column 15, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns true if `p` is a primise\n  instance."}, resolved {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 71, :column 7, :end-line 71, :end-column 15, :arglists (quote ([v])), :doc "Return a resolved promise with provided value."}, :name promesa.core/resolved, :variadic false, :file "out/promesa/core.cljs", :end-column 15, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Return a resolved promise with provided value."}, reason {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 202, :column 7, :end-line 202, :end-column 13, :arglists (quote ([p])), :doc "Get the rejection reason of this promise.\n  Throws an error if the promise isn't rejected."}, :name promesa.core/reason, :variadic false, :file "out/promesa/core.cljs", :end-column 13, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Get the rejection reason of this promise.\n  Throws an error if the promise isn't rejected."}, t10674 {:num-fields 1, :protocols #{cats.protocols/Monad cats.protocols/Functor cljs.core/IMeta cljs.core/IWithMeta}, :name promesa.core/t10674, :file "out/promesa/core.cljs", :type true, :anonymous true, :column 3, :line 40, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, cancelable {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 223, :column 7, :end-line 223, :end-column 17, :arglists (quote ([p])), :doc "Mark a promise as cancellable."}, :name promesa.core/cancelable, :variadic false, :file "out/promesa/core.cljs", :end-column 17, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Mark a promise as cancellable."}, catch {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 180, :column 7, :end-line 180, :end-column 12, :arglists (quote ([p callback] [p type callback])), :doc "Catch all promise chain helper.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p callback] [p type callback]), :arglists ([p callback] [p type callback]), :arglists-meta (nil nil)}}, :name promesa.core/catch, :variadic false, :file "out/promesa/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p callback] [p type callback]), :arglists ([p callback] [p type callback]), :arglists-meta (nil nil)}, :method-params ([p callback] [p type callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 3, :fn-var true, :arglists ([p callback] [p type callback]), :doc "Catch all promise chain helper."}, rejected? {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 102, :column 7, :end-line 102, :end-column 16, :arglists (quote ([p])), :doc "Returns true if promise `p` is\n  already rejected."}, :name promesa.core/rejected?, :variadic false, :file "out/promesa/core.cljs", :end-column 16, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns true if promise `p` is\n  already rejected."}, then {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 162, :column 7, :end-line 162, :end-column 11, :arglists (quote ([p callback])), :doc "A chain helper for promises."}, :name promesa.core/then, :variadic false, :file "out/promesa/core.cljs", :end-column 11, :method-params ([p callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p callback])), :doc "A chain helper for promises."}, error {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 191, :column 7, :end-line 191, :end-column 12, :arglists (quote ([p callback])), :doc "Catch operational errors promise chain helper."}, :name promesa.core/error, :variadic false, :file "out/promesa/core.cljs", :end-column 12, :method-params ([p callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p callback])), :doc "Catch operational errors promise chain helper."}, pending? {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 109, :column 7, :end-line 109, :end-column 15, :arglists (quote ([p])), :doc "Returns true if promise `p` is\n  stil pending."}, :name promesa.core/pending?, :variadic false, :file "out/promesa/core.cljs", :end-column 15, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns true if promise `p` is\n  stil pending."}, cancel {:protocol-inline nil, :meta {:file "/home/user/projects/imperative-nodejs/playground/out/promesa/core.cljs", :line 228, :column 7, :end-line 228, :end-column 13, :arglists (quote ([p])), :doc "Cancel a cancellable promise."}, :name promesa.core/cancel, :variadic false, :file "out/promesa/core.cljs", :end-column 13, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 228, :end-line 228, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Cancel a cancellable promise."}}, :require-macros {m cats.core, cats.core cats.core}, :cljs.analyzer/constants {:seen #{:else :cancel :timeout}, :order [:else :timeout :cancel]}, :doc nil}